// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	storage "GoExamComments/internal/storage"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: ctx, com
func (_m *DB) AddComment(ctx context.Context, com storage.Comment) (string, error) {
	ret := _m.Called(ctx, com)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Comment) (string, error)); ok {
		return rf(ctx, com)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.Comment) string); ok {
		r0 = rf(ctx, com)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.Comment) error); ok {
		r1 = rf(ctx, com)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Comments provides a mock function with given fields: ctx, post
func (_m *DB) Comments(ctx context.Context, post string) ([]storage.Comment, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for Comments")
	}

	var r0 []storage.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storage.Comment, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storage.Comment); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOffensive provides a mock function with given fields: ctx, id
func (_m *DB) SetOffensive(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetOffensive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
